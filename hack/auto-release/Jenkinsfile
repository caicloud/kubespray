// params defined in Jenkins pipeline setting
def KUBESPRAY_BRANCH = "${params.kubespray_branch}"
def RELEASE_VERSION = "${params.release_version}"
def PACKING_DIR = "${params.packing_dir}"
def TOOLS_DIR = "${params.tools_dir}"
def TAG_SUFFIX = "${params.tag_suffix}"
def PACKAGE_NAME = "k8s-installer-${RELEASE_VERSION}-${TAG_SUFFIX}"

// basic settings, use default if not changed
def USER = "${params.packing_host_user}"
def HOST = "${params.packing_host_add}"
def PASSWORD = "${params.packing_host_pass}"
def SAVE_HOST = "${params.save_host}"
def SAVE_USER = "${params.save_user}"
def SAVE_PATH = "${params.save_path}"
def GITHUB_CREDENTIAL_ID = "${params.github_credential_id}"
def GIT_EMAIL = "${params.git_email}"
def SOURCE_REGISTRY = "${params.source_registry}"
def SOURCE_REGISTRY_CREDENTIAL_ID = "${params.source_registry_credential_id}"
def TARGET_REGISTRY = "${params.target_registry}"
def TARGET_REGISTRY_CREDENTIAL_ID = "${params.target_registry_credential_id}"
def RELEASE_REGISTRY = "${params.release_registry}"
def RELEASE_REGISTRY_CREDENTIAL_ID = "${params.release_registry_credential_id}"
def KUBESPRAY_REGISTRY = "${params.kubespray_registry}"

// define lark config
def LARK_CHANNEL_TOKEN = "${params.lark_channel_token}"
def NEW_LARK_CHANNEL_TOKEN = "${params.new_lark_channel_token}"
def AT_ALL = "${params.at_all}"

// Jenkins build-in params for sending slack notification
def JOB_NAME = "${env.JOB_NAME}"
def BUILD_NUMBER = "${env.BUILD_NUMBER}"
def BUILD_URL = "${env.BUILD_URL}"

// docker registry prefix
def DOCKER_REGISTRY_PREFIX = "cargo.caicloud.xyz"
// this guarantees the node will use this template
def POD_NAME = "kubespray-release-${UUID.randomUUID().toString()}"

// Kubernetes pod template to run.
podTemplate(
    cloud: "dev-cluster",
    namespace: "kube-system",
    name: POD_NAME,
    label: POD_NAME,
    yaml: """
apiVersion: v1
kind: Pod
spec:
  containers:
  - env:
    - name: DOCKER_HOST
      value: unix:///home/jenkins/docker.sock
    name: kubespray-release
    image: "${DOCKER_REGISTRY_PREFIX}/release/kubespray-jenkins:v0.0.1"
    imagePullPolicy: Always
    tty: true
  - name: jnlp
    args: ["\$(JENKINS_SECRET)", "\$(JENKINS_NAME)"]
    image: "${DOCKER_REGISTRY_PREFIX}/library/jnlp-slave:3.14-1-alpine"
    imagePullPolicy: IfNotPresent
  - name: dind
    args:
    - --host=unix:///home/jenkins/docker.sock
    image: "${DOCKER_REGISTRY_PREFIX}/library/docker:17.09-dind"
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
    tty: true
""",
) {
    node(POD_NAME) {
        try {
            container("kubespray-release") {
                ansiColor("xterm") {
                    withCredentials([
                    [$class: "UsernamePasswordMultiBinding", credentialsId: "${SOURCE_REGISTRY_CREDENTIAL_ID}", passwordVariable: "SOURCE_REGISTRY_PASSWORD", usernameVariable: "SOURCE_REGISTRY_USER"],
                    [$class: "UsernamePasswordMultiBinding", credentialsId: "${TARGET_REGISTRY_CREDENTIAL_ID}", passwordVariable: "TARGET_REGISTRY_PASSWORD", usernameVariable: "TARGET_REGISTRY_USER"],
                    [$class: "UsernamePasswordMultiBinding", credentialsId: "${RELEASE_REGISTRY_CREDENTIAL_ID}", passwordVariable: "RELEASE_REGISTRY_PASSWORD", usernameVariable: "RELEASE_REGISTRY_USER"],
                    ]) {
                        stage("Init env") {
                            sh """
                                cp /jenkins/ansible/inventory.sample /jenkins/ansible/inventory
                                sed -i 's#CARGO_IP#${HOST}#g' /jenkins/ansible/inventory
                                sed -i 's#CARGO_PASSWORD#${PASSWORD}#g' /jenkins/ansible/inventory
                                sed -i 's#CARGO_ROOT#${USER}#g' /jenkins/ansible/inventory
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "docker login ${SOURCE_REGISTRY} -u ${SOURCE_REGISTRY_USER} -p ${SOURCE_REGISTRY_PASSWORD}"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "docker login ${TARGET_REGISTRY} -u ${TARGET_REGISTRY_USER} -p ${TARGET_REGISTRY_PASSWORD}"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "docker login ${RELEASE_REGISTRY} -u ${RELEASE_REGISTRY_USER} -p ${RELEASE_REGISTRY_PASSWORD}"
                            """
                        }

                        stage("Checkout form git") {
                            retry(10) {
                                checkout scm
                            }
                        }

                        stage("Init repo") {
                            withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDENTIAL_ID}", passwordVariable: "GITHUB_TOKEN", usernameVariable: "GITHUB_USERNAME")]) {
                                sh """
                                    # Init repo
                                    git remote remove origin
                                    git remote add upstream https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/caicloud/kubespray
                                    git remote add origin https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_USERNAME}/kubespray
                                    # Prepare git email for CLA.
                                    git config --global user.email ${GIT_EMAIL}
                                    git fetch upstream
                                    git reset --hard upstream/${KUBESPRAY_BRANCH}
                                """
                            }
                        }

                        if (params.update_images_list){
                            stage("Generate images list PR") {
                                withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDENTIAL_ID}", passwordVariable: "GITHUB_TOKEN", usernameVariable: "GITHUB_USERNAME")]) {
                                    sh """
                                        make convert-images
                                        # if images list not change, skip make PR
                                        if [[ "\$(git status -s)" == "" ]]; then echo "" > ./api_pull_url.txt; exit 0; fi
                                        git checkout -B ${RELEASE_VERSION}-images
                                        git add images-lists
                                        git commit -m "chore(images-lists): update ${RELEASE_VERSION} images lists"
                                        git push --set-upstream origin ${RELEASE_VERSION}-images --force
                                        # Make PR with curl.
                                        curl -X POST \
                                        https://api.github.com/repos/caicloud/kubespray/pulls \
                                        -H 'Authorization: Bearer ${GITHUB_TOKEN}' \
                                        -d '{
                                        "title": "[Auto pushed by Jenkins]: update ${RELEASE_VERSION} images lists",
                                        "body": "**What this PR does / why we need it**:\\n\\nupdate ${RELEASE_VERSION} images lists\\n\\n**Special notes for your reviewer**:\\n\\n/cc @caicloud/platform-release \\n\\n```release-note\\nNONE\\n```",
                                        "head": "${GITHUB_USERNAME}:${RELEASE_VERSION}-images",
                                        "base": "${KUBESPRAY_BRANCH}"
                                        }' \
                                        > pull_info.txt
                                        cat pull_info.txt | grep pulls | grep '\"url\"' | awk -F' ' '{print\$2}' | sed 's# ##g;s#,##g;s#\"##g' > api_pull_url.txt
                                    """
                                    PR_URL = readFile "./api_pull_url.txt"
                                    retry(50) {
                                        // directly merge the pr by add lgtm and approved label, do not check
                                        sh """
                                            # skipe check pr if repeat package
                                            if [[ "\$(cat ./api_pull_url.txt)" == "" ]]; then exit 0; fi
                                            python3 -u hack/auto-release/check.py merge ${GITHUB_TOKEN} ${BUILD_URL} ${PR_URL}
                                        """
                                    }
                                }
                            }
                        }

                        if (params.update_repo_tag){
                            stage("Generate repo tag") {
                                sh """
                                    git fetch upstream
                                    git checkout upstream/${KUBESPRAY_BRANCH}
                                    git checkout -B ${RELEASE_VERSION}-tag
                                    git reset --hard upstream/${KUBESPRAY_BRANCH}
                                    git tag ${RELEASE_VERSION}-${TAG_SUFFIX} --force
                                    git push upstream --tags --force
                                """
                            }
                        }

                        stage("Create k8s-installer directory") {

                            sh """
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "rm -rf ${PACKING_DIR} || true; mkdir -p ${PACKING_DIR}"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd ${PACKING_DIR}; mkdir -p ${PACKAGE_NAME}/ssh_cert ${PACKAGE_NAME}/tools ${PACKAGE_NAME}/files ${PACKAGE_NAME}/registry_ca_cert"
                            """
                        }

                        stage("Build kubespray images") {
                            sh """
                                tar cpf kubespray.tar.gz *
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "rm -f /kubespray.tar.gz; rm -rf /kubespray; mkdir -p /kubespray"
                                ansible -i /jenkins/ansible/inventory cargo -m copy -a "src=./kubespray.tar.gz dest=/"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "tar xpf /kubespray.tar.gz -C /kubespray && rm -f /kubespray.tar.gz"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd /kubespray && make push REGISTRY=${KUBESPRAY_REGISTRY} VERSION=${RELEASE_VERSION}-${TAG_SUFFIX}"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd /kubespray && make save REGISTRY=${KUBESPRAY_REGISTRY} VERSION=${RELEASE_VERSION}-${TAG_SUFFIX} SAVE_PATH=${PACKING_DIR}/${PACKAGE_NAME}/files"
                            """
                        }

                        stage("Sync images") {
                            sh """
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd /kubespray && make check-images"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "rm -rf /compass/common/cargo-registry && bash /compass/cargo-ansible/cargo/restart.sh"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd /kubespray && bash hack/auto-release/sync.sh ${SOURCE_REGISTRY} ${TARGET_REGISTRY} images-lists"
                            """
                        }
                        // todo check missed images

                        stage("Package images") {
                            sh """
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd /kubespray && bash hack/auto-release/sync.sh ${TARGET_REGISTRY} ${RELEASE_REGISTRY} images-lists"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd /compass/common/cargo-registry && tar cf ${PACKING_DIR}/${PACKAGE_NAME}/images.tar.gz docker"
                            """
                        }

                        stage("Add install script and tools") {
                            sh """
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cp /kubespray/config/inventory ${PACKING_DIR}/${PACKAGE_NAME}/inventory.sample"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cp /kubespray/config/env.yml ${PACKING_DIR}/${PACKAGE_NAME}/env.yml.sample"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cp /kubespray/hack/k8s-installer/install.sh ${PACKING_DIR}/${PACKAGE_NAME}"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cp -rf /kubespray/hack/k8s-installer/tools ${PACKING_DIR}/${PACKAGE_NAME}"
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cp -rf ${TOOLS_DIR} ${PACKING_DIR}/${PACKAGE_NAME}"
                            """
                        }

                        stage("Create k8s-installer package") {
                            sh """
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd ${PACKING_DIR}; tar cvf ${PACKAGE_NAME}{.tar.gz,}"
                            """
                        }

                        stage("Copy to save host") {
                            sh """
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a 'ssh ${SAVE_USER}@${SAVE_HOST} "mkdir -p ${SAVE_PATH}" || true'
                                ansible -i /jenkins/ansible/inventory cargo -m shell -a "cd ${PACKING_DIR}; scp ${PACKAGE_NAME}.tar.gz ${SAVE_USER}@${SAVE_HOST}:${SAVE_PATH}/${PACKAGE_NAME}.tar.gz "
                            """
                        }

                        stage("Upload to oss") {
                            sh """
                            ansible -i /jenkins/ansible/inventory cargo -m shell -a 'ssh ${SAVE_USER}@${SAVE_HOST} "/root/ossutil cp -u ${SAVE_PATH}/${PACKAGE_NAME}.tar.gz oss://infra-release${SAVE_PATH}/${PACKAGE_NAME}.tar.gz"'
                            """
                        }
                    }
                }
            }
        } catch (Exception e) {
            MESSAGE = "【Failed】Jenkins Job ${JOB_NAME}-${BUILD_NUMBER} Link: ${BUILD_URL}"
            sendLarkMessage("${MESSAGE}")
            throw e
        }
    }
}

def larkAlert(GLOBAL_MESSAGE, REAL_LARK_CHANNEL_TOKEN) {
    container("kubespray-release") {
        sh """
        curl -X POST -H "Content-type: application/json" -d "${GLOBAL_MESSAGE}" https://open.feishu.cn/open-apis/bot/v2/hook/${REAL_LARK_CHANNEL_TOKEN}
        """
    }
}

def sendLarkMessage(MESSAGE) {
    // Send message to lark.
    // url: https://www.feishu.cn/hc/zh-cn/articles/360024984973-%E5%9C%A8%E7%BE%A4%E8%81%8A%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%9C%BA%E5%99%A8%E4%BA%BA

    // if AT_ALL is true, add tag "at" to content message
    if ("${AT_ALL}" == "true") {
        GLOBAL_MESSAGE="{\\\"msg_type\\\":\\\"post\\\",\\\"content\\\":{\\\"post\\\":{\\\"zh_cn\\\":{\\\"title\\\":\\\"product-release\\\",\\\"content\\\":[[{\\\"tag\\\": \\\"at\\\", \\\"user_id\\\": \\\"all\\\"},{\\\"tag\\\":\\\"text\\\",\\\"text\\\":\\\"${MESSAGE}\\\"}]]}}}}"
    } else {
        GLOBAL_MESSAGE="{\\\"msg_type\\\":\\\"post\\\",\\\"content\\\":{\\\"post\\\":{\\\"zh_cn\\\":{\\\"title\\\":\\\"product-release\\\",\\\"content\\\":[[{\\\"tag\\\":\\\"text\\\",\\\"text\\\":\\\"${MESSAGE}\\\"}]]}}}}"
    }
    if("${NEW_LARK_CHANNEL_TOKEN}" != "") {
        REAL_LARK_CHANNEL_TOKEN="${NEW_LARK_CHANNEL_TOKEN}"
    } else {
        // default LARK_CHANNEL_TOKEN type is "teamName__larkToken", split it and get REAL_LARK_CHANNEL_TOKEN
        REAL_LARK_CHANNEL_TOKEN="${LARK_CHANNEL_TOKEN.split('__')[1]}"
    }
    larkAlert("${GLOBAL_MESSAGE}", "${REAL_LARK_CHANNEL_TOKEN}")
}
